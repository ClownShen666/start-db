<?xml version="1.0" encoding="UTF-8"?>

<!--  通用空间数据类型转换  测试用例  -->
<testCase>
    <resultXml>stDataTransform_result.xml</resultXml>
    <!--  传入给定点的geoJson，返回点  st_pointFromGeoJSON(geoJson: String): Point  -->
    <case>
        <sql type="query">select st_pointFromGeoJson(?);</sql>
        <arguments resultID="1">['{ "type": "Point", "coordinates": [1.0 2.0] }']</arguments>
        <arguments exception="ClassCastException">[1]</arguments>
    </case>
    <!--  传入给定线的geoJson，返回线  st_lineStringFromGeoJSON(geoJson: String): LineString  -->
    <case>
        <sql type="query">select st_lineStringFromGeoJson(?);</sql>
        <arguments resultID="2">['{ "type":"LineString", "coordinates":[ [0.0 1.0],[1.0 2.0] ] }']</arguments>
        <arguments exception="ClassCastException">[1]</arguments>
    </case>
    <!--  传入给定面的geoJson，返回面  st_polygonFromGeoJSON(geoJson: String): Polygon  -->
    <case>
        <sql type="query">select st_PolygonFromGeoJson(?);</sql>
        <arguments resultID="ignore">['{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }']</arguments>
        <arguments exception="ClassCastException">[1]</arguments>
    </case>
    <!--  st_mPointFromGeoJSON(geoJson: String): MultiPoint  -->
    <case>
        <sql type="query">select st_mPointFromGeoJson(?);</sql>
        <arguments resultID="3">['{ "type": "MultiPoint", "coordinates": [ [0 1], [2 3] ] }']</arguments>
        <arguments exception="ClassCastException">[1]</arguments>
    </case>
    <!--  st_mLineStringFromGeoJSON(geoJson: String): MultiLineString  -->
    <case>
        <sql type="query">select st_mLineStringFromGeoJson(?);</sql>
        <arguments resultID="ignore">[st_asGeoJSON(st_mLineStringFromGeoJson('{ "type": "MultiLineString", "coordinates": [ [ [1.0 1.0], [2.0 2.0] ], [ [1.0 2.0], [2.0 3.0] ] ] }'))]</arguments>
        <arguments exception="ClassCastException">[1]</arguments>
    </case>
    <!--  st_mPolygonFromGeoJSON(geoJson: String): MultiPolygon  -->
    <case>
        <sql type="query">select st_mPolygonFromGeoJson(?);</sql>
        <arguments resultID="ignore">['{ "type": "MultiPolygon", "coordinates": [ [[[0 0], [4 0], [4 4], [0 4], [0 0]]], [[[2 2], [6 2], [6 6], [2 6], [2 2]]] ] }']</arguments>
        <arguments exception="ClassCastException">[1]</arguments>
    </case>
    <!--  给定Geometry的GeoJSON字符串，生成对应类型的几何对象  st_geomFromGeoJSON(geojsonGeometry: String): Geometry  -->
    <case>
        <sql type="query">select st_geomFromGeoJSON(?);</sql>
        <arguments resultID="4">['{ "type":"Point", "coordinates": [1 2] }']</arguments>
        <arguments resultID="5">['{ "type":"LineString", "coordinates":[ [0.0 1.0],[1.0 2.0] ] }']</arguments>
        <arguments resultID="ignore">['{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }']</arguments>
        <arguments resultID="6">['{ "type": "MultiPoint", "coordinates": [ [0 1], [2 3] ] }']</arguments>
        <arguments resultID="7">['{ "type": "MultiLineString", "coordinates": [ [ [1.0 1.0], [2.0 2.0] ], [ [1.0 2.0], [2.0 3.0] ] ] }']</arguments>
        <arguments resultID="ignore">['{ "type": "MultiPolygon", "coordinates": [ [[[0 0], [4 0], [4 4], [0 4], [0 0]]], [[[2 2], [6 2], [6 6], [2 6], [2 2]]] ] }']</arguments>
        <arguments exception="ClassCastException">[1]</arguments>
    </case>
    <!--  生成geom对应的GeoJSON形式  st_asGeoJSON(geom: Geometry): String  -->
    <case>
        <sql type="query">select st_asGeoJSON(?);</sql>
        <arguments resultID="8">[st_makePoint(1, 2)]</arguments>
        <arguments resultID="9">[st_geomFromWKT('LINESTRING(0 0,1 1,2 2)')]</arguments>
        <arguments resultID="10">[st_PolygonFromGeoJson('{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }')]</arguments>
        <arguments resultID="11">[st_mPointFromGeoJson('{ "type": "MultiPoint", "coordinates": [ [0 1], [2 3] ] }')]</arguments>
        <arguments resultID="12">[st_mLineStringFromGeoJson('{ "type": "MultiLineString", "coordinates": [ [ [1.0 1.0], [2.0 2.0] ], [ [1.0 2.0], [2.0 3.0] ] ] }')]</arguments>
        <arguments resultID="13">[st_mPolygonFromGeoJson('{ "type": "MultiPolygon", "coordinates": [ [[[0 0], [4 0], [4 4], [0 4], [0 0]]], [[[2 2], [6 2], [6 6], [2 6], [2 2]]] ] }')]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  将POINT的WKT转为POINT对象  st_pointFromWKT(wktString: String): Point  -->
    <case>
        <sql type="query">select st_PointFromWkt(?);</sql>
        <arguments resultID="14">['POINT(1 2)']</arguments>
        <arguments resultID="15">['LINESTRING(0 0,1 1,2 2)']</arguments>
        <arguments resultID="16">['']</arguments>
        <arguments exception="ParseException">[1]</arguments>
    </case>
    <!--  将lineString的WKT转为POINT对象  st_lineStringFromWKT(wktString: String): LineString  -->
    <case>
        <sql type="query">select st_lineStringFromWkt(?);</sql>
        <arguments resultID="17">['POINT(1 2)']</arguments>
        <arguments resultID="18">['LINESTRING(0 0,1 1,2 2)']</arguments>
        <arguments resultID="19">['']</arguments>
        <arguments exception="ParseException">[1]</arguments>
    </case>
    <!--  将polygon的WKT转为POINT对象  st_polygonFromWKT(wktString: String): Polygon  -->
    <case>
        <sql type="query">select st_polygonFromWkt(?);</sql>
        <arguments resultID="20">['POINT(1 2)']</arguments>
        <arguments resultID="ignore">['POLYGON(0 0,4 0,4 4,0 4,0 0)']</arguments>
        <arguments resultID="21">['']</arguments>
        <arguments exception="ParseException">[1]</arguments>
    </case>
    <!--  将mPoint的WKT转为POINT对象  st_mPointFromWKT(wktString: String): MultiPolygon  -->
    <case>
        <sql type="query">select st_mPointFromWkt(?);</sql>
        <arguments resultID="22">['MULTIPOINT(3.5 5.6, 4.8 10.5)']</arguments>
        <arguments resultID="23">['POINT(1 2)']</arguments>
        <arguments resultID="24">['']</arguments>
        <arguments exception="ParseException">[1]</arguments>
    </case>
    <!--  将mLineString的WKT转为POINT对象  st_mLineStringFromWKT(wktString: String): MultiLineString  -->
    <case>
        <sql type="query">select st_mLineStringFromWkt(?);</sql>
        <arguments resultID="25">['MULTILINESTRING((3 4,10 50,20 25),(-5 -8,-10 -8,-15 -4))']</arguments>
        <arguments resultID="26">['LINESTRING(0 0,1 1,2 2)']</arguments>
        <arguments resultID="27">['']</arguments>
        <arguments exception="ParseException">[1]</arguments>
    </case>
    <!--  将mPolygon的WKT转为POINT对象  st_mPolygonFromWKT(wktString: String): MultiPolygon  -->
    <case>
        <sql type="query">select st_mPolygonFromWkt(?);</sql>
        <arguments resultID="ignore">['MULTIPOLYGON(((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2)))']</arguments>
        <arguments resultID="ignore">['POLYGON(0 0,4 0,4 4,0 4,0 0)']</arguments>
        <arguments resultID="28">['']</arguments>
        <arguments exception="ParseException">[1]</arguments>
    </case>
    <!--  将空间数据类型的WKT转为Geometry对象  st_geomFromWKT(wktString: String): Geometry  -->
    <case>
        <sql type="query">select st_geomFromWkt(?);</sql>
        <arguments resultID="29">['POINT(1 2)']</arguments>
        <arguments resultID="30">['LINESTRING(0 0,1 1,2 2)']</arguments>
        <arguments resultID="ignore">['POLYGON(0 0,4 0,4 4,0 4,0 0)']</arguments>
        <arguments resultID="31">['MULTIPOINT(3.5 5.6, 4.8 10.5)']</arguments>
        <arguments resultID="32">['MULTILINESTRING((3 4,10 50,20 25),(-5 -8,-10 -8,-15 -4))']</arguments>
        <arguments resultID="ignore">['MULTIPOLYGON(((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2)))']</arguments>
        <arguments exception="ParseException">[1]</arguments>
    </case>
    <!--  将geom对象转为WKT字符串  st_asWKT(geom: Geometry): String  -->
    <case>
        <sql type="query">select st_asWkt(?);</sql>
        <arguments resultID="33">[st_makePoint(1, 2)]</arguments>
        <arguments resultID="34">[st_geomFromWKT('LINESTRING(0 0,1 1,2 2)')]</arguments>
        <arguments resultID="35">[st_PolygonFromGeoJson('{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }')]</arguments>
        <arguments resultID="36">[st_mPointFromGeoJson('{ "type": "MultiPoint", "coordinates": [ [0 1], [2 3] ] }')]</arguments>
        <arguments resultID="37">[st_mLineStringFromGeoJson('{ "type": "MultiLineString", "coordinates": [ [ [1.0 1.0], [2.0 2.0] ], [ [1.0 2.0], [2.0 3.0] ] ] }')]</arguments>
        <arguments resultID="38">[st_mPolygonFromGeoJson('{ "type": "MultiPolygon", "coordinates": [ [[[0 0], [4 0], [4 4], [0 4], [0 0]]], [[[2 2], [6 2], [6 6], [2 6], [2 2]]] ] }')]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  创建与给定WKB表示相对应的Point  st_pointFromWKB(wkb: Binary): Point  -->
    <case>
        <sql type="query">select st_pointFromWkb(?);</sql>
        <arguments resultID="39">[st_asWKB(st_makePoint(1, 2))]</arguments>
        <arguments resultID="40">[st_asWKB(st_geomFromWKT('LINESTRING(0 0,1 1,2 2)'))]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  创建与给定WKB表示相对应的LINESTRING  st_lineStringFromWKB(wkb: Binary): LineString  -->
    <case>
        <sql type="query">select st_linestringFromWkb(?);</sql>
        <arguments resultID="41">[st_asWKB(st_makePoint(1, 2))]</arguments>
        <arguments resultID="42">[st_asWKB(st_geomFromWKT('LINESTRING(0 0,1 1,2 2)'))]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  创建与给定WKB表示相对应的Polygon  st_polygonFromWKB(wkb: Binary): Polygon  -->
    <case>
        <sql type="query">select st_polygonFromWKB(?);</sql>
        <arguments resultID="43">[st_asWKB(st_makePoint(1, 2))]</arguments>
        <arguments resultID="ignore">[st_asWKB(st_PolygonFromGeoJson('{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }'))]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  创建与给定WKB表示相对应的mPoint  st_mPointFromWKB(wkb: Binary): MultiPoint  -->
    <case>
        <sql type="query">select st_mPointFromWKB(?);</sql>
        <arguments resultID="45">[st_asWKB(st_makePoint(1, 2))]</arguments>
        <arguments resultID="46">[st_asWKB(st_mPointFromGeoJson('{ "type": "MultiPoint", "coordinates": [ [0 1], [2 3] ] }'))]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  创建与给定WKB表示相对应的mLineString  st_mLineStringFromWKB(wkb: Binary): MultiLineString  -->
    <case>
        <sql type="query">select st_mLineStringFromWKB(?);</sql>
        <arguments resultID="47">[st_asWKB(st_geomFromWKT('LINESTRING(0 0,1 1,2 2)'))]</arguments>
        <arguments resultID="48">[st_asWKB(st_mLineStringFromGeoJson('{ "type": "MultiLineString", "coordinates": [ [ [1.0 1.0], [2.0 2.0] ], [ [1.0 2.0], [2.0 3.0] ] ] }'))]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  创建与给定WKB表示相对应的mPolygon  st_mPolygonFromWKB(wkb: Binary): MultiPolygon  -->
    <case>
        <sql type="query">select st_mPolygonFromWKB(?);</sql>
        <arguments resultID="49">[st_asWKB(st_PolygonFromGeoJson('{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }'))]</arguments>
        <arguments resultID="ignore">[st_asWKB(st_mPolygonFromGeoJson('{ "type": "MultiPolygon", "coordinates": [ [[[0 0], [4 0], [4 4], [0 4], [0 0]]], [[[2 2], [6 2], [6 6], [2 6], [2 2]]] ] }'))]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  根据已知的二进制表示(WKB)创建几何图形  st_geomFromWKB(wkb: Binary): Geometry  -->
    <case>
        <sql type="query">select st_geomFromWkb(?);</sql>
        <arguments resultID="50">[st_asWKB(st_makePoint(1, 2))]</arguments>
        <arguments resultID="51">[st_asWKB(st_mPointFromGeoJson('{ "type": "MultiPoint", "coordinates": [ [0 1], [2 3] ] }'))]</arguments>
        <arguments resultID="52">[st_asWKB(st_geomFromWKT('LINESTRING(0 0,1 1,2 2)'))]</arguments>
        <arguments resultID="53">[st_asWKB(st_mLineStringFromGeoJson('{ "type": "MultiLineString", "coordinates": [ [ [1.0 1.0], [2.0 2.0] ], [ [1.0 2.0], [2.0 3.0] ] ] }'))]</arguments>
        <arguments resultID="ignore">[st_asWKB(st_PolygonFromGeoJson('{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }'))]</arguments>
        <arguments resultID="ignore">[st_asWKB(st_mPolygonFromGeoJson('{ "type": "MultiPolygon", "coordinates": [ [[[0 0], [4 0], [4 4], [0 4], [0 0]]], [[[2 2], [6 2], [6 6], [2 6], [2 2]]] ] }'))]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  生成geom对应的WKB形式（字节数组）  st_asWKB(geom: Geometry): Binary  -->
    <case>
        <sql type="query">select st_asWKB(?);</sql>
        <arguments resultID="54">[st_makePoint(1, 2)]</arguments>
        <arguments resultID="55">[st_geomFromWKT('LINESTRING(0 0,1 1,2 2)')]</arguments>
        <arguments resultID="56">[st_PolygonFromGeoJson('{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }')]</arguments>
        <arguments resultID="57">[st_mPointFromGeoJson('{ "type": "MultiPoint", "coordinates": [ [0 1], [2 3] ] }')]</arguments>
        <arguments resultID="58">[st_mLineStringFromGeoJson('{ "type": "MultiLineString", "coordinates": [ [ [1.0 1.0], [2.0 2.0] ], [ [1.0 2.0], [2.0 3.0] ] ] }')]</arguments>
        <arguments resultID="59">[st_mPolygonFromGeoJson('{ "type": "MultiPolygon", "coordinates": [ [[[0 0], [4 0], [4 4], [0 4], [0 0]]], [[[2 2], [6 2], [6 6], [2 6], [2 2]]] ] }')]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  返回由Geohash字符串（base-32 编码方式）定义的Polygon的几何中心，精度为prec位
            st_pointFromGeoHash(geohash: String, prec: Integer): Point  -->
    <case>
        <sql type="query">select st_pointFromGeoHash(?, ?);</sql>
        <arguments resultID="60">['ezs42'][25]</arguments>
        <arguments exception="MismatchedInputException">[1]['']</arguments>
    </case>
    <!--  传入geoHash和精度返回Geometry
        st_geomFromGeoHash(geoHash: String, prec: Integer): Geometry  -->
    <case>
        <sql type="ignore">select st_geomFromGeoHash(?, ?);</sql>
        <arguments resultID="61">[st_asGeoHash(st_makePoint(1,2),30)][30]</arguments>
        <arguments resultID="62">[st_asGeoHash(st_geomFromWKT('LINESTRING(0 0,1 1,2 2)'),30)][30]</arguments>
        <arguments resultID="63">[st_asGeoHash(st_PolygonFromGeoJson('{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }'),30)][30]</arguments>
        <arguments resultID="64">[st_asGeoHash(st_mPointFromGeoJson('{ "type": "MultiPoint", "coordinates": [ [0 1], [2 3] ] }'),30)][30]</arguments>
        <arguments resultID="65">[st_asGeoHash(st_mLineStringFromGeoJson('{ "type": "MultiLineString", "coordinates": [ [ [1.0 1.0], [2.0 2.0] ], [ [1.0 2.0], [2.0 3.0] ] ] }'),30)][30]</arguments>
        <arguments resultID="66">[st_asGeoHash(st_mPolygonFromGeoJson('{ "type": "MultiPolygon", "coordinates": [ [[[0 0], [4 0], [4 4], [0 4], [0 0]]], [[[2 2], [6 2], [6 6], [2 6], [2 2]]] ] }'),30)][30]</arguments>
        <arguments exception="MismatchedInputException">[1]['']</arguments>
    </case>
    <!--  根据Geometry， geoHash位数 精度返回hash值  st_asGeoHash(geom: Geometry, prec: Integer): String  -->
    <case>
        <sql type="query">select st_asGeoHash(?, ?);</sql>
        <arguments resultID="67">[st_makePoint(1,2)][30]</arguments>
        <arguments resultID="68">[st_geomFromWKT('LINESTRING(0 0,1 1,2 2)')][30]</arguments>
        <arguments resultID="69">[st_PolygonFromGeoJson('{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }')][30]</arguments>
        <arguments resultID="70">[st_mPointFromGeoJson('{ "type": "MultiPoint", "coordinates": [ [0 1], [2 3] ] }')][30]</arguments>
        <arguments resultID="71">[st_mLineStringFromGeoJson('{ "type": "MultiLineString", "coordinates": [ [ [1.0 1.0], [2.0 2.0] ], [ [1.0 2.0], [2.0 3.0] ] ] }')][30]</arguments>
        <arguments resultID="72">[st_mPolygonFromGeoJson('{ "type": "MultiPolygon", "coordinates": [ [[[0 0], [4 0], [4 4], [0 4], [0 0]]], [[[2 2], [6 2], [6 6], [2 6], [2 2]]] ] }')][30]</arguments>
        <arguments exception="SqlValidatorException">[1][1]</arguments>
    </case>
    <!--  将geom 转为Point对象  st_castToPoint(geom: Geometry): Point  -->
    <case>
        <sql type="query">select st_castToPoint(?);</sql>
        <arguments resultID="73">[st_geomFromWKT('POINT(1 1)')]</arguments>
        <arguments resultID="74">[st_geomFromWKT('LINESTRING(0 0,1 1,2 2)')]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  将geom 转为LineString对象  st_castToLineString(geom: Geometry): LineString  -->
    <case>
        <sql type="query">select st_castToLineString(?);</sql>
        <arguments resultID="75">[st_makePoint(1,2)]</arguments>
        <arguments resultID="76">[st_geomFromWKT('LINESTRING(0 0,1 1,2 2)')]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  将geom 转为Polygon对象  st_castToPolygon(geom: Geometry): Polygon  -->
    <case>
        <sql type="query">select st_castToPolygon(?);</sql>
        <arguments resultID="77">[st_makePoint(1,2)]</arguments>
        <arguments resultID="ignore">[st_PolygonFromGeoJson('{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }')]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  将geom 转为mPoint对象  st_castToMPoint(geom: Geometry): MultiPoint  -->
    <case>
        <sql type="query">select st_castToMPoint(?);</sql>
        <arguments resultID="78">[st_makePoint(1,2)]</arguments>
        <arguments resultID="79">[st_mPointFromGeoJson('{ "type": "MultiPoint", "coordinates": [ [0 1], [2 3] ] }')]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  将geom 转为MLineString对象  st_castToMLineString(geom: Geometry): MultiLineString  -->
    <case>
        <sql type="query">select st_castToMLineString(?);</sql>
        <arguments resultID="80">[st_geomFromWKT('LINESTRING(0 0,1 1,2 2)')]</arguments>
        <arguments resultID="81">[st_mLineStringFromGeoJson('{ "type": "MultiLineString", "coordinates": [ [ [1.0 1.0], [2.0 2.0] ], [ [1.0 2.0], [2.0 3.0] ] ] }')]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  将geom 转为mPolygon对象  st_castToMPolygon(geom: Geometry): MultiPolygon  -->
    <case>
        <sql type="query">select st_castToMPolygon(?);</sql>
        <arguments resultID="82">[st_PolygonFromGeoJson('{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }')]</arguments>
        <arguments resultID="ignore">[st_mPolygonFromGeoJson('{ "type": "MultiPolygon", "coordinates": [ [[[0 0], [4 0], [4 4], [0 4], [0 0]]], [[[2 2], [6 2], [6 6], [2 6], [2 2]]] ] }')]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
    <!--  将geom 转为Geometry对象st_castToGeometry(geom: Geometry): Geometry  -->
    <case>
        <sql type="query">select st_castToGeometry(?);</sql>
        <arguments resultID="83">[st_makePoint(1,2)]</arguments>
        <arguments resultID="84">[st_mPointFromGeoJson('{ "type": "MultiPoint", "coordinates": [ [0 1], [2 3] ] }')]</arguments>
        <arguments resultID="85">[st_geomFromWKT('LINESTRING(0 0,1 1,2 2)')]</arguments>
        <arguments resultID="86">[st_mLineStringFromGeoJson('{ "type": "MultiLineString", "coordinates": [ [ [1.0 1.0], [2.0 2.0] ], [ [1.0 2.0], [2.0 3.0] ] ] }')]</arguments>
        <arguments resultID="ignore">[st_PolygonFromGeoJson('{ "type": "Polygon", "coordinates": [ [[0 0], [4 0], [4 4], [0 4], [0 0]] ] }')]</arguments>
        <arguments resultID="ignore">[st_mPolygonFromGeoJson('{ "type": "MultiPolygon", "coordinates": [ [[[0 0], [4 0], [4 4], [0 4], [0 0]]], [[[2 2], [6 2], [6 6], [2 6], [2 2]]] ] }')]</arguments>
        <arguments exception="SqlValidatorException">[1]</arguments>
    </case>
</testCase>